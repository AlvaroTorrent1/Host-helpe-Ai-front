#!/usr/bin/env node
// scripts/verify-config.cjs - Verificar configuraci√≥n actual de Stripe

const fs = require('fs');
const path = require('path');

const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(color, message) {
  console.log(`${color}${message}${colors.reset}`);
}

function readConfigFile() {
  const configPath = path.join(__dirname, '../config/stripe-config.ts');
  try {
    const content = fs.readFileSync(configPath, 'utf8');
    const match = content.match(/const USE_PRODUCTION_MODE = (true|false);/);
    return match ? (match[1] === 'true') : null;
  } catch (error) {
    return null;
  }
}

function checkEnvironmentVar() {
  // Simulamos lo que har√≠a Vite
  const envFiles = ['.env.local', '.env', '.env.development'];
  let envKey = null;
  
  for (const envFile of envFiles) {
    try {
      const envPath = path.join(__dirname, '..', envFile);
      if (fs.existsSync(envPath)) {
        const content = fs.readFileSync(envPath, 'utf8');
        const match = content.match(/VITE_STRIPE_PUBLIC_KEY=(.+)/);
        if (match) {
          envKey = match[1].trim();
          break;
        }
      }
    } catch (error) {
      // Ignorar errores de archivos que no existen
    }
  }
  
  return envKey;
}

function main() {
  log(colors.bold, 'üîç VERIFICACI√ìN DE CONFIGURACI√ìN STRIPE');
  log(colors.cyan, '=====================================');
  console.log('');
  
  // Verificar configuraci√≥n en archivo
  const useProductionMode = readConfigFile();
  log(colors.blue, 'üìÅ Configuraci√≥n en archivo (config/stripe-config.ts):');
  if (useProductionMode === true) {
    log(colors.green, '   ‚úÖ USE_PRODUCTION_MODE = true (PRODUCCI√ìN)');
  } else if (useProductionMode === false) {
    log(colors.yellow, '   üß™ USE_PRODUCTION_MODE = false (TEST)');
  } else {
    log(colors.red, '   ‚ùå No se pudo leer la configuraci√≥n');
  }
  console.log('');
  
  // Verificar variable de entorno
  const envKey = checkEnvironmentVar();
  log(colors.blue, 'üåç Variable de entorno (VITE_STRIPE_PUBLIC_KEY):');
  if (envKey) {
    const isLive = envKey.startsWith('pk_live_');
    const keyPreview = envKey.substring(0, 15) + '...';
    
    if (isLive) {
      log(colors.green, `   ‚úÖ pk_live_... detectada: ${keyPreview}`);
      log(colors.green, '   ‚Üí Variable de entorno tomar√° precedencia (PRODUCCI√ìN)');
    } else {
      log(colors.yellow, `   üß™ pk_test_... detectada: ${keyPreview}`);
      log(colors.yellow, '   ‚Üí Variable de entorno tomar√° precedencia (TEST)');
    }
  } else {
    log(colors.blue, '   üìù No hay variable de entorno definida');
    log(colors.blue, '   ‚Üí Se usar√° configuraci√≥n manual del archivo');
  }
  console.log('');
  
  // Determinar modo efectivo
  let effectiveMode, reason;
  if (envKey) {
    effectiveMode = envKey.startsWith('pk_live_') ? 'PRODUCCI√ìN' : 'TEST';
    reason = 'Variable de entorno';
  } else {
    effectiveMode = useProductionMode ? 'PRODUCCI√ìN' : 'TEST';
    reason = 'Configuraci√≥n manual';
  }
  
  log(colors.bold, 'üéØ MODO EFECTIVO:');
  if (effectiveMode === 'PRODUCCI√ìN') {
    log(colors.green, `   üöÄ MODO PRODUCCI√ìN (${reason})`);
    log(colors.yellow, '   ‚ö†Ô∏è  Los pagos ser√°n REALES');
  } else {
    log(colors.blue, `   üß™ MODO TEST (${reason})`);
    log(colors.green, '   ‚úÖ Los pagos son simulados');
  }
  console.log('');
  
  // Recomendaciones
  log(colors.bold, 'üí° RECOMENDACIONES:');
  
  if (envKey && !envKey.startsWith('pk_live_') && useProductionMode) {
    log(colors.yellow, '   ‚ö†Ô∏è  Tienes configuraci√≥n PRODUCCI√ìN pero variable TEST');
    log(colors.blue, '   ‚Üí Opci√≥n 1: Elimina VITE_STRIPE_PUBLIC_KEY de archivos .env');
    log(colors.blue, '   ‚Üí Opci√≥n 2: Cambia VITE_STRIPE_PUBLIC_KEY a pk_live_...');
  } else if (!envKey && effectiveMode === 'PRODUCCI√ìN') {
    log(colors.green, '   ‚úÖ Configuraci√≥n correcta para testing de producci√≥n');
    log(colors.blue, '   ‚Üí Ve a: http://localhost:4003/pricing');
    log(colors.blue, '   ‚Üí Verifica que NO aparezca "Modo de prueba"');
  } else if (effectiveMode === 'TEST') {
    log(colors.blue, '   üß™ En modo TEST - perfecto para desarrollo');
    log(colors.blue, '   ‚Üí Para probar modo producci√≥n: npm run stripe:production');
  }
  
  console.log('');
  log(colors.bold, 'üîß COMANDOS √öTILES:');
  log(colors.blue, '   npm run stripe:status     - Ver estado actual');
  log(colors.blue, '   npm run stripe:production - Cambiar a producci√≥n');
  log(colors.blue, '   npm run stripe:test       - Cambiar a test');
  log(colors.blue, '   npm run test:production   - Gu√≠a de testing');
  console.log('');
}

main(); 