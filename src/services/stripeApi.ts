// src/services/stripeApi.ts - API de Stripe
// Este archivo maneja la integraci√≥n con Stripe usando Supabase Edge Functions
// CONFIGURADO PARA PRODUCCI√ìN - Pagos reales con claves LIVE

import supabase from './supabase';
import { stripeValidator } from '@/config/stripe-validator';
import stripeConfig from '@/config/stripe-config';

/**
 * Interfaz para los datos necesarios para crear un payment intent
 */
interface CreatePaymentIntentParams {
  amount: number;
  currency: string;
  user_id: string;
  plan_id: string;
  email: string;
}

interface CreatePaymentIntentResponse {
  clientSecret: string;
  paymentIntentId?: string;
}

/**
 * Crea un payment intent en Stripe a trav√©s de Supabase Edge Functions
 * Solo para producci√≥n - sin c√≥digo de desarrollo o simulaciones
 */
export const createPaymentIntent = async (params: CreatePaymentIntentParams): Promise<CreatePaymentIntentResponse> => {
  // Validar configuraci√≥n antes de proceder
  const validationStatus = stripeValidator.getValidationStatus();
  
  if (!validationStatus.isValid) {
    console.error('‚ùå Configuraci√≥n de Stripe inv√°lida:', validationStatus.errors);
    throw new Error('Configuraci√≥n de pago incorrecta. Por favor, contacte al administrador.');
  }

  // Advertir si hay inconsistencias
  if (validationStatus.warnings.length > 0) {
    console.warn('‚ö†Ô∏è Advertencias de configuraci√≥n:', validationStatus.warnings);
  }

  // Sistema en MODO PRODUCCI√ìN - Pagos reales
  console.log('üí≥ Creando payment intent para MODO PRODUCCI√ìN (LIVE):', {
    amount: params.amount,
    currency: params.currency,
    user_id: params.user_id,
    plan_id: params.plan_id,
    email: params.email
  });
  
  try {
    // Validar par√°metros de entrada
    if (!params.amount || params.amount <= 0) {
      throw new Error('El monto debe ser mayor a 0');
    }
    
    if (!params.user_id) {
      throw new Error('ID de usuario es requerido');
    }
    
    if (!params.email) {
      throw new Error('Email es requerido');
    }
    
    // Llamar a la funci√≥n de Supabase para crear el payment intent
    console.log('üì° Invocando funci√≥n create-payment-intent de Supabase...');
    console.log('üí≥ Modo PRODUCCI√ìN activo - Procesando pago real con claves LIVE');
    
    // A√±adir metadata sobre el modo para debugging
    const enrichedParams = {
      ...params,
      metadata: {
        frontend_mode: 'production',
        key_type: 'live',
        timestamp: new Date().toISOString(),
        environment: 'production'
      }
    };
    
    const { data, error } = await supabase.functions.invoke('create-payment-intent', {
      body: enrichedParams
    });
    
    if (error) {
      console.error('‚ùå Error de Supabase functions:', error);
      
      // Proporcionar mensajes m√°s espec√≠ficos seg√∫n el error
      if (error.message?.includes('non-2xx status code')) {
        // Verificar si es un problema de configuraci√≥n
        const recommendations = stripeValidator.getRecommendations();
        if (recommendations.length > 0) {
          console.error('üìã Recomendaciones para solucionar el error:');
          recommendations.forEach(rec => console.error(`  - ${rec}`));
        }
        throw new Error('Error de configuraci√≥n del servidor. Verifique las claves de Stripe en el backend.');
      }
      
      throw new Error(`Error al crear payment intent: ${error.message}`);
    }
    
    // Manejar tanto formato camelCase como snake_case por compatibilidad
    const clientSecret = data.clientSecret || data.client_secret;
    const paymentIntentId = data.paymentIntentId || data.payment_intent_id;
    
    if (!clientSecret) {
      console.error('‚ùå Respuesta inv√°lida de Supabase functions:', data);
      throw new Error('No se recibi√≥ un client_secret v√°lido del servidor');
    }
    
    console.log('‚úÖ Payment intent creado exitosamente');
    return {
      clientSecret,
      paymentIntentId
    };
    
  } catch (error: any) {
    console.error('‚ùå Error en createPaymentIntent:', error);
    
    // Proporcionar mensajes de error m√°s espec√≠ficos
    if (error.message?.includes('fetch')) {
      throw new Error('Error de conexi√≥n. Verifica tu conexi√≥n a internet e intenta de nuevo.');
    }
    
    if (error.message?.includes('unauthorized')) {
      throw new Error('Error de autorizaci√≥n. Por favor, inicia sesi√≥n de nuevo.');
    }
    
    // Re-lanzar el error original con contexto adicional
    throw new Error(`Error al procesar el pago: ${error.message}`);
  }
};

/**
 * Actualiza el estado de una suscripci√≥n en la base de datos
 * Se usa despu√©s de confirmaci√≥n exitosa de pago
 */
export const updateSubscriptionStatus = async (userId: string, planId: string, status: string) => {
  try {
    console.log('üîÑ Actualizando estado de suscripci√≥n:', { userId, planId, status });
    
    const { error } = await supabase
      .from('customer_subscriptions')
      .update({ 
        status,
        updated_at: new Date().toISOString()
      })
      .eq('user_id', userId)
      .eq('plan_id', planId);

    if (error) {
      console.error('‚ùå Error al actualizar estado de suscripci√≥n:', error);
      throw new Error(`Error al actualizar suscripci√≥n: ${error.message}`);
    }

    console.log('‚úÖ Estado de suscripci√≥n actualizado correctamente');
    return { success: true };
  } catch (error: any) {
    console.error('‚ùå Error al actualizar estado de suscripci√≥n:', error);
    throw new Error(`Error al actualizar suscripci√≥n: ${error.message}`);
  }
};

/**
 * Crear un registro de suscripci√≥n pendiente antes del pago
 * Esto permite rastrear intentos de pago y asociarlos con usuarios
 */
export const createPendingSubscription = async (userId: string, planId: string, email: string) => {
  try {
    console.log('üîÑ Creando suscripci√≥n pendiente:', { userId, planId, email });
    
    const { data, error } = await supabase
      .from('customer_subscriptions')
      .insert({
        user_id: userId,
        plan_id: planId,
        status: 'pending',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error al crear suscripci√≥n pendiente:', error);
      throw new Error(`Error al crear suscripci√≥n: ${error.message}`);
    }

    console.log('‚úÖ Suscripci√≥n pendiente creada correctamente');
    return data;
  } catch (error: any) {
    console.error('‚ùå Error al crear suscripci√≥n pendiente:', error);
    throw new Error(`Error al preparar suscripci√≥n: ${error.message}`);
  }
}; 