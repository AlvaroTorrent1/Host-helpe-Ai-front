-- File: supabase/migrations/20251016_EJECUTAR_TODO_VERIFICACION.sql
-- Purpose: ALL-IN-ONE script for verification + backup + cleanup of candidate tables
-- Date: 2025-10-16
-- 
-- ‚ö†Ô∏è IMPORTANTE: 
-- 1. Este script hace VERIFICACI√ìN + BACKUP autom√°tico
-- 2. El CLEANUP de tablas est√° COMENTADO por seguridad
-- 3. Revisa los resultados y descomenta el PASO 3 si quieres ejecutar el cleanup

-- ============================================
-- PASO 1: VERIFICACI√ìN
-- ============================================

DO $$ 
DECLARE
    table_exists boolean;
    row_count integer;
    last_activity timestamp;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '   VERIFICACI√ìN DE TABLAS CANDIDATAS A DEPRECAR';
    RAISE NOTICE '   Fecha: %', NOW();
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '';

    -- ============================================
    -- GROUP 1: CALENDLY INTEGRATION (üóëÔ∏è CANDIDATAS)
    -- ============================================
    RAISE NOTICE 'üì¶ GRUPO 1: INTEGRACI√ìN CALENDLY (candidatas a deprecar)';
    RAISE NOTICE '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ';
    
    -- sync_logs
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'sync_logs') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.sync_logs;
        IF row_count > 0 THEN
            SELECT MAX(created_at) INTO last_activity FROM public.sync_logs;
            RAISE NOTICE '  ‚úÖ sync_logs: % rows | √öltima actividad: %', row_count, last_activity;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è sync_logs: VAC√çA (0 rows)';
        END IF;
    ELSE
        RAISE NOTICE '  ‚ùå sync_logs: NO EXISTE';
    END IF;

    -- scal_configs
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'scal_configs') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.scal_configs;
        IF row_count > 0 THEN
            SELECT MAX(created_at) INTO last_activity FROM public.scal_configs;
            RAISE NOTICE '  ‚úÖ scal_configs: % rows | √öltima actividad: %', row_count, last_activity;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è scal_configs: VAC√çA (0 rows)';
        END IF;
    ELSE
        RAISE NOTICE '  ‚ùå scal_configs: NO EXISTE';
    END IF;

    -- synced_bookings
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'synced_bookings') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.synced_bookings;
        IF row_count > 0 THEN
            SELECT MAX(created_at) INTO last_activity FROM public.synced_bookings;
            RAISE NOTICE '  ‚úÖ synced_bookings: % rows | √öltima actividad: %', row_count, last_activity;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è synced_bookings: VAC√çA (0 rows)';
        END IF;
    ELSE
        RAISE NOTICE '  ‚ùå synced_bookings: NO EXISTE';
    END IF;

    RAISE NOTICE '';
    RAISE NOTICE 'üìä GRUPO 2: MONITORING/LOGS (verificar antes de eliminar)';
    RAISE NOTICE '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ';
    
    -- integrity_alerts_log
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'integrity_alerts_log') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.integrity_alerts_log;
        IF row_count > 0 THEN
            SELECT MAX(created_at) INTO last_activity FROM public.integrity_alerts_log;
            RAISE NOTICE '  ‚úÖ integrity_alerts_log: % rows | √öltima actividad: %', row_count, last_activity;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è integrity_alerts_log: VAC√çA (0 rows)';
        END IF;
    ELSE
        RAISE NOTICE '  ‚ùå integrity_alerts_log: NO EXISTE';
    END IF;

    -- modal_logs_state
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'modal_logs_state') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.modal_logs_state;
        IF row_count > 0 THEN
            SELECT MAX(updated_at) INTO last_activity FROM public.modal_logs_state;
            RAISE NOTICE '  ‚úÖ modal_logs_state: % rows | √öltima actividad: %', row_count, last_activity;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è modal_logs_state: VAC√çA (0 rows)';
        END IF;
    ELSE
        RAISE NOTICE '  ‚ùå modal_logs_state: NO EXISTE';
    END IF;

    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ GRUPO 3: TABLAS CORE (mantener siempre)';
    RAISE NOTICE '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ';
    
    -- obs_chat_histories
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'obs_chat_histories') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.obs_chat_histories;
        RAISE NOTICE '  ‚úÖ obs_chat_histories (Chat Memory): % conversaciones', row_count;
    ELSE
        RAISE NOTICE '  ‚ùå obs_chat_histories: NO EXISTE ‚ö†Ô∏è PROBLEMA';
    END IF;

    -- customer_subscriptions
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'customer_subscriptions') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.customer_subscriptions;
        RAISE NOTICE '  ‚úÖ customer_subscriptions (Billing): % suscripciones', row_count;
    ELSE
        RAISE NOTICE '  ‚ùå customer_subscriptions: NO EXISTE';
    END IF;

    -- plan_limits
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'plan_limits') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.plan_limits;
        RAISE NOTICE '  ‚úÖ plan_limits (Billing): % planes configurados', row_count;
    ELSE
        RAISE NOTICE '  ‚ùå plan_limits: NO EXISTE';
    END IF;

    -- user_properties
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'user_properties') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.user_properties;
        RAISE NOTICE '  ‚úÖ user_properties (Core): % relaciones user-property', row_count;
    ELSE
        RAISE NOTICE '  ‚ùå user_properties: NO EXISTE';
    END IF;

    -- storage_file_registry
    SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'storage_file_registry') INTO table_exists;
    IF table_exists THEN
        SELECT COUNT(*) INTO row_count FROM public.storage_file_registry;
        IF row_count > 0 THEN
            RAISE NOTICE '  ‚úÖ storage_file_registry: % archivos registrados', row_count;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è storage_file_registry: VAC√çA (¬øno se usa Storage?)';
        END IF;
    ELSE
        RAISE NOTICE '  ‚ùå storage_file_registry: NO EXISTE';
    END IF;

    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '   VERIFICACI√ìN COMPLETADA';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    
END $$;

-- ============================================
-- PASO 2: BACKUP AUTOM√ÅTICO
-- ============================================

DO $$ 
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '   BACKUP AUTOM√ÅTICO DE TABLAS CON DATOS';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '';
END $$;

-- Backup: sync_logs
DO $$ 
DECLARE
    row_count integer;
BEGIN
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'sync_logs') THEN
        SELECT COUNT(*) INTO row_count FROM public.sync_logs;
        IF row_count > 0 THEN
            CREATE TABLE IF NOT EXISTS _backup_20251016_sync_logs AS SELECT * FROM public.sync_logs;
            RAISE NOTICE '  üíæ Backup creado: _backup_20251016_sync_logs (% rows)', row_count;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è sync_logs vac√≠a - sin backup';
        END IF;
    END IF;
END $$;

-- Backup: scal_configs
DO $$ 
DECLARE
    row_count integer;
BEGIN
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'scal_configs') THEN
        SELECT COUNT(*) INTO row_count FROM public.scal_configs;
        IF row_count > 0 THEN
            CREATE TABLE IF NOT EXISTS _backup_20251016_scal_configs AS SELECT * FROM public.scal_configs;
            RAISE NOTICE '  üíæ Backup creado: _backup_20251016_scal_configs (% rows)', row_count;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è scal_configs vac√≠a - sin backup';
        END IF;
    END IF;
END $$;

-- Backup: synced_bookings
DO $$ 
DECLARE
    row_count integer;
BEGIN
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'synced_bookings') THEN
        SELECT COUNT(*) INTO row_count FROM public.synced_bookings;
        IF row_count > 0 THEN
            CREATE TABLE IF NOT EXISTS _backup_20251016_synced_bookings AS SELECT * FROM public.synced_bookings;
            RAISE NOTICE '  üíæ Backup creado: _backup_20251016_synced_bookings (% rows)', row_count;
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è synced_bookings vac√≠a - sin backup';
        END IF;
    END IF;
END $$;

-- Backup: integrity_alerts_log
DO $$ 
DECLARE
    row_count integer;
BEGIN
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'integrity_alerts_log') THEN
        SELECT COUNT(*) INTO row_count FROM public.integrity_alerts_log;
        IF row_count > 0 THEN
            CREATE TABLE IF NOT EXISTS _backup_20251016_integrity_alerts_log AS SELECT * FROM public.integrity_alerts_log;
            RAISE NOTICE '  üíæ Backup creado: _backup_20251016_integrity_alerts_log (% rows)', row_count;
        END IF;
    END IF;
END $$;

-- Backup: modal_logs_state
DO $$ 
DECLARE
    row_count integer;
BEGIN
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'modal_logs_state') THEN
        SELECT COUNT(*) INTO row_count FROM public.modal_logs_state;
        IF row_count > 0 THEN
            CREATE TABLE IF NOT EXISTS _backup_20251016_modal_logs_state AS SELECT * FROM public.modal_logs_state;
            RAISE NOTICE '  üíæ Backup creado: _backup_20251016_modal_logs_state (% rows)', row_count;
        END IF;
    END IF;
END $$;

DO $$ 
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '   BACKUP COMPLETADO';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '';
END $$;

-- ============================================
-- PASO 3: CLEANUP (COMENTADO - Descomentar para ejecutar)
-- ============================================

/*
DO $$ 
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '   CLEANUP: ELIMINANDO TABLAS NO UTILIZADAS';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '';
END $$;

-- DROP: sync_logs
DO $$ 
BEGIN
    DROP TABLE IF EXISTS public.sync_logs CASCADE;
    RAISE NOTICE '  üóëÔ∏è Eliminada: sync_logs (Sistema Calendly)';
END $$;

-- DROP: scal_configs
DO $$ 
BEGIN
    DROP TABLE IF EXISTS public.scal_configs CASCADE;
    RAISE NOTICE '  üóëÔ∏è Eliminada: scal_configs (Configuraci√≥n Calendly)';
END $$;

-- DROP: synced_bookings
DO $$ 
BEGIN
    DROP TABLE IF EXISTS public.synced_bookings CASCADE;
    RAISE NOTICE '  üóëÔ∏è Eliminada: synced_bookings (Bookings Calendly)';
END $$;

-- DROP: integrity_alerts_log (solo si est√° vac√≠a)
-- DO $$ 
-- BEGIN
--     DROP TABLE IF EXISTS public.integrity_alerts_log CASCADE;
--     RAISE NOTICE '  üóëÔ∏è Eliminada: integrity_alerts_log (Monitoreo legacy)';
-- END $$;

-- DROP: modal_logs_state (solo si est√° vac√≠a)
-- DO $$ 
-- BEGIN
--     DROP TABLE IF EXISTS public.modal_logs_state CASCADE;
--     RAISE NOTICE '  üóëÔ∏è Eliminada: modal_logs_state (Logs frontend legacy)';
-- END $$;

DO $$ 
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '   ‚úÖ CLEANUP COMPLETADO';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '';
    RAISE NOTICE 'üìä Resumen:';
    RAISE NOTICE '   üóëÔ∏è 3 tablas eliminadas (Calendly)';
    RAISE NOTICE '   ‚úÖ 5 tablas core mantenidas';
    RAISE NOTICE '   üíæ Backups disponibles por 30 d√≠as';
    RAISE NOTICE '';
END $$;
*/

-- ============================================
-- RESUMEN FINAL
-- ============================================

DO $$ 
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '   üìä RESUMEN FINAL';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Pasos completados:';
    RAISE NOTICE '   1. ‚úÖ Verificaci√≥n de tablas';
    RAISE NOTICE '   2. ‚úÖ Backup autom√°tico (si ten√≠an datos)';
    RAISE NOTICE '   3. ‚ö†Ô∏è Cleanup PENDIENTE (est√° comentado)';
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ Siguiente acci√≥n:';
    RAISE NOTICE '   - Revisar los resultados de verificaci√≥n arriba';
    RAISE NOTICE '   - Si todo est√° OK, descomenta PASO 3 y ejecuta de nuevo';
    RAISE NOTICE '   - O ejecuta 006_cleanup_tablas_candidatas.sql directamente';
    RAISE NOTICE '';
    RAISE NOTICE 'üí° Tablas candidatas a eliminar:';
    RAISE NOTICE '   üóëÔ∏è sync_logs (Calendly - no usada en workflows)';
    RAISE NOTICE '   üóëÔ∏è scal_configs (Calendly - no usada)';
    RAISE NOTICE '   üóëÔ∏è synced_bookings (Calendly - no usada)';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Tablas a mantener:';
    RAISE NOTICE '   ‚úÖ obs_chat_histories (Postgres Chat Memory)';
    RAISE NOTICE '   ‚úÖ customer_subscriptions (Billing Stripe)';
    RAISE NOTICE '   ‚úÖ plan_limits (Billing)';
    RAISE NOTICE '   ‚úÖ user_properties (Core)';
    RAISE NOTICE '   ‚úÖ storage_file_registry (Supabase Storage)';
    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
END $$;

